{"version":3,"file":"solclient.js","mappings":"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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message-tracing/api.js","webpack://solace/./modules/solclient-message-tracing/lib/baggage.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context-setter.js","webpack://solace/./modules/solclient-message-tracing/lib/message-trace-context.js","webpack://solace/./modules/solclient-message-tracing/lib/message-tracing-support.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-outcomes.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/clone.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\n\nfunction uint8ArrayToString(data, format = undefined) {\n  const dataLength = data.byteLength;\n  const uint8DataArray = new Uint8Array(BufferImpl.from(data));\n  let result = '';\n  for (let i = 0; i < dataLength; i++) {\n    if(format && format.toLowerCase() === 'hex') {\n      result += (uint8DataArray[i]).toString(16).padStart(2, '0');\n    } else {\n      result += String.fromCharCode(uint8DataArray[i] & 0xff);\n    }\n  }\n  return result;\n}\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction hexStringToUint8Array(data) {\n  // if null data, return empty Uint8Array\n  if(data == null) {\n    return new Uint8Array();\n  }\n  return Uint8Array.from(BufferImpl.from(data, 'hex'));\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  \n  uint8ArrayToString,\n  stringToUint8Array,\n\n  hexStringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst MessageTracing = require('solclient-message-tracing');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  MessageTracing,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  Baggage,\n  TraceContext,\n  TraceContextSetter,\n} = require('solclient-message-tracing');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  Baggage,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageOutcome,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TraceContext,\n  TraceContextSetter,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'invalid queue or topic endpoint durability', SC.INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    // 'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'replay not supported on anonymous queue without subscriptions', SC.REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'browsing not supported on partitioned queue', SC.PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED,\n    'selectors not supported on partitioned queue', SC.PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE,\n    'sync replication ineligible', SC.SYNC_REPLICATION_INELIGIBLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   * @deprecated since 10.3.1 - Replay is now supported on Temp Endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT:         160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                                161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                               162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                                 163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                           164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                             165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:                    166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                           167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                                    168,\n  /**\n   * Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n  REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                         169,\n  /**\n   * Browser flows to Partitioned Queues are not permitted.\n   * - 403 Browsing Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED:                     170,\n  /**\n   * Egress selectors are not permitted when binding to a Partitioned Queue.\n   * - 403 Selectors Not Supported on Partitioned Queue\n   */\n  PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED:                    171,\n  /**\n   * Replay Not Supported on Anonymous Queue Without Subscriptions\n   * - 403 Replay Not Supported on Anonymous Queue Without Subscriptions\n   */\n  REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED:   172,\n  /**\n   * The message was rejected because the appliance has been configured\n   * to reject messages when sync replication mode is ineligible.\n   * - 503 Sync Replication Ineligible (Reject Messages when Synchronous Replication Mode is Ineligible)\n   * \n   * * The transaction was started as a synchronous replicated transaction,\n   * but replication became ineligible during the transaction.\n   * - 503 Sync Replication Ineligible (Replication Ineligible during Synchronous Replicated Transaction)\n   */\n  SYNC_REPLICATION_INELIGIBLE:                                  173,\n  /**\n   * An attempt was made to bind to a durable TE or Queue \n   * with a flow property of ‘non-durable’.\n   *\n   * Causes:\n   *  * 400 Invalid Queue or Topic Endpoint Durability\n   */\n  INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY:                   174,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import Long = require('long');\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnected;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { MessageOutcome } = require('solclient-message');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state, settlementOutcome) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n      this.settlementOutcome = settlementOutcome || MessageOutcome.ACCEPTED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state, settlementOutcome = undefined) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n    this.settlementOutcome = (settlementOutcome !== undefined) ? settlementOutcome : null; // outcome not yet set at point of insertion\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n    this.settlementOutcome = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @param {?MessageOutcome} settlementOutcome where available, update the settlement outcome for the ID\n   * @private\n   */\n  updateAckState(id, state, settlementOutcome = undefined) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n    // where available, update the settlement outcome too\n    if(settlementOutcome != undefined) {\n      existing.settlementOutcome = settlementOutcome;\n    } else if(state === ApplicationAckState.ACKED_NOT_SENT) {\n      // set default settlement outcome to ACCEPTED for ACKed messages if no outcome available\n      existing.settlementOutcome = MessageOutcome.ACCEPTED;\n    }\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { MessageOutcome, RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\n// assumption is that this first message (messageId = 0) settlement outcome is ACCEPTED (ACKed)\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT, MessageOutcome.ACCEPTED);\n\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n    this._hasAutoAckSupport = autoAck;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n\n    function verifyNackSettlementOutcomesSupport(requiredSettlementOutcomes) {\n      let error = null;\n      // check for whether the broker session supports the NACK capability\n      const settlementOutcomes = requiredSettlementOutcomes;\n      if (settlementOutcomes && settlementOutcomes.length > 0) {\n        // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n        const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n        if(isNackRequired && !fsm._sessionInterface.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n          const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n            settlementOutcomes.map(v => MessageOutcome.nameOf(v)).join(', ')\n          } ]`;\n          // log the operation error as a Warning\n          LOG_WARN(outcomeNotSupportedError);\n          // then create the actual OperationError object here\n          error = new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION);\n        }      \n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n      else if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n\n    /**\n     * Check Capabilities on Re-Bind\n     * \n     * @param {*} curState - current state\n     * @param {*} externalTransition - is an external transition?\n     * @returns {State} retrurns the new state for the state machine\n     * @private\n     */\n    function checkCapabilitiesChoicePointOnRebind(curState, externalTransition = false) {\n      let error = null;\n      if (properties.requiredSettlementOutcomes) {\n        error = verifyNackSettlementOutcomesSupport(properties.requiredSettlementOutcomes);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to re-bind\n      if (externalTransition) {\n        return curState.externalTransitionTo(fsm.Reconnecting.RBindSent);\n      }\n      return curState.transitionTo(fsm.Reconnecting.RBindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state and partition group ID, if any');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          (properties.requiredSettlementOutcomes && properties.requiredSettlementOutcomes.length > 0));\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId,\n          consumer.partitionGroupId,\n          properties.requiredSettlementOutcomes]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        // the partition group ID\n        let partitionGroupIdValue = msg.getPartitionGroupId();\n        if(partitionGroupIdValue == undefined || partitionGroupIdValue == null) {\n          partitionGroupIdValue = undefined; // set it as undefined\n          fsm._clearPartitionGroupId(); // clear the partitionGroupId\n        }\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n          partitionGroupId:     partitionGroupIdValue,\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n          partitionGroupId:     partitionGroupIdValue,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return checkCapabilitiesChoicePointOnRebind(this, false);\n          // return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return checkCapabilitiesChoicePointOnRebind(this, false);\n        // return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return checkCapabilitiesChoicePointOnRebind(this, true);\n          // return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return checkCapabilitiesChoicePointOnRebind(this, false);\n      // return this.transitionTo(fsm.Reconnecting.RBindSent);\n    });\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emitting UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emitting UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          const dupAckRanges = new Map();\n          dupAckRanges.set(MessageOutcome.ACCEPTED, [[messageID, messageID]]);\n          this._sendAck(dupAckRanges); // send ack for duplicates as ACCEPTED outcome (broker would use previous settlement outcome for message)\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId, isAutoAcked = false) {\n    // internally call the applicationSettle(messageId, MessageOutcome.ACCEPTED); \n    // since the implementations are the same\n    this.applicationSettle(messageId, MessageOutcome.ACCEPTED, isAutoAcked);\n  }\n\n  applicationSettle(messageId, messageOutcome = MessageOutcome.ACCEPTED, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n\n    // increment the correct stat for the outcome\n    switch(messageOutcome) {\n      case MessageOutcome.FAILED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.FAILED');\n        // count persistent and non-persistent settled failed msgs\n        this._consumer.incStat(StatType.RX_SETTLE_FAILED);\n        break;\n      // case MessageOutcome.RELEASED:\n      //   // no current support for RELEASED settlement Outcome\n      //   break;\n      case MessageOutcome.REJECTED:\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.REJECTED');\n        // count persistent and non-persistent settled rejected msgs\n        this._consumer.incStat(StatType.RX_SETTLE_REJECTED);\n        break;\n\n      case MessageOutcome.ACCEPTED:\n         // count persistent and non-persistent settled accepted msgs\n        LOG_TRACE('Settling the message with outcome as solace.MessageOutcome.ACCEPTED');\n        // count for manual calls on Message.acknowledge(); or Message.settle(outcome); methods\n        // so that we don't count for auto-Acks\n        if(!isAutoAcked) {\n          this._consumer.incStat(StatType.RX_SETTLE_ACCEPTED); // count persistent and non-persistent settled accepted msgs\n        }\n        // increment the Acked stat for calls to accept() and auto-acks\n        this._consumer.incStat(StatType.RX_ACKED); // count it as normal acknowledgement\n        break;\n    }\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      const oldAckRanges = new Map();\n      oldAckRanges.set(messageOutcome, [[messageId, messageId]]);\n      this._sendAck(oldAckRanges); // send settlement outcome for message\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT, messageOutcome);\n    // if the message outcome is not ACCEPTED, then flush the buffer immediately\n    if(messageOutcome !== MessageOutcome.ACCEPTED) {\n      this._sendAcks(true); // send the accumulated Ack(s) and Nacks immediately\n    } else {\n      this._setTransportAckTimer();\n    }\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n\n    this._clearPartitionGroupId(); // clear the partitionGroupId\n\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _clearPartitionGroupId() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Clear the consumer.partitionGroupId; Set it to undefined');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n\n    LOG_TRACE('Initializing partitionGroupId');\n    this._consumer.partitionGroupId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Map.<Array.<ackpair>>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    // they will hold an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    const currentRangeLength = currentRange.length;\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      // check for the type of settlement outcome and push if same as aggregation group\n      if(\n        currentRangeLength === 0 ||\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome === applicationAck.settlementOutcome)\n      ) {\n        currentRange.push(applicationAck);\n        return; // Wait for end of range or flush\n      }\n      // if settlement outcomes were flushed and applicationAck still remaining, start another aggregation group\n      else if(\n        ((currentRangeLength > 0)\n        && currentRange[currentRangeLength - 1].settlementOutcome !== applicationAck.settlementOutcome)\n      ) {\n        const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n        ackRanges[rangeOutcome].push(currentRange); // flush the range since we detect a change in outcomes\n\n        acksPendingState.currentRange = []; // Clear the accumulators for this range.\n        acksPendingState.currentRange.push(applicationAck); // push the detected change\n        return; // Wait for end of range or flush\n      }\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range for each of the settlement outcomes.\n    if (currentRangeLength) {\n      const rangeOutcome = currentRange[currentRangeLength - 1].settlementOutcome;\n      ackRanges[rangeOutcome].push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n\n    // aggregate the total length of the ack/nack ranges\n    let totalRangeLen  = 0;\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      totalRangeLen += ackRanges[allMessageOutcomes[i]].length;\n    }\n\n    if (applicationAck === null || (totalRangeLen === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES)) {\n      // Reduce each range for each of the settlement outcomes to a first and last ID.\n      const bareRanges = new Map(); // ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n      let hasAnyBareRanges = false;\n\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        // check for value and only put real values into map\n        if(ackRanges[allMessageOutcomes[i]].length > 0) {\n          bareRanges.set(allMessageOutcomes[i], ackRanges[allMessageOutcomes[i]].map(\n            range => [range[0].id, range[range.length - 1].id]\n          ));\n          // we have written at least one outcome ack/nack range into the map\n          hasAnyBareRanges = true;\n        }\n      }\n\n      if (hasAnyBareRanges || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n\n        this._sendAck(bareRanges); // now contains a Map of Arrays to pass settlement outcomes to Broker\n\n        // expectation is only ONE NACK before we flush the (N)acks in the RingBuffer to the broker\n        const failedBareRanges = bareRanges.get(MessageOutcome.FAILED);\n        const rejectedBareRanges = bareRanges.get(MessageOutcome.REJECTED);\n\n        // Warning: this log statement reduces debug performance by about 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks(ACCEPTED): ${bareRanges.has(MessageOutcome.ACCEPTED)\n            ? bareRanges.get(MessageOutcome.ACCEPTED).map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}\\n`,\n          `Application Nacks(FAILED): ${bareRanges.has(MessageOutcome.FAILED)\n            ? `[${failedBareRanges[0][0]}..${failedBareRanges[0][1]}]`\n            : '[]'}\\n`,\n          `Application Nacks(REJECTED): ${bareRanges.has(MessageOutcome.REJECTED)\n            ? `[${rejectedBareRanges[0][0]}..${rejectedBareRanges[0][1]}]`\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        ackRanges[allMessageOutcomes[i]].forEach((ackRange) => {\n          ackRange.forEach((ack) => {\n            if (ack.state !== ApplicationAckState.ACKED_SENT) {\n              try {\n                this._applicationAcks.updateAckState(ack.id,\n                                                     ApplicationAckState.ACKED_SENT);\n              } catch (e) {\n                const { LOG_ERROR } = this.logger;\n                LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n              }\n            }\n          });\n        });\n      }\n\n      // Clear the main accumulators since it has hit the wire.\n      acksPendingState.ackRanges = [];\n      for(let i = 0; i < allMessageOutcomes.length; i ++) {\n        acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n      }\n    }\n    // Clear the accumulators for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n    // All message settlement outcomes\n    const allMessageOutcomes = MessageOutcome.values;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [], // holds an Array of Arrays for each supported settlement outcomes (i.e. indexes -> 0,1,2,3)\n      currentRange:      [], // holds an Array for each supported settlement outcomes per aggregation (i.e. indexes -> 0,1,2,3)\n    };\n\n    // initialize the ackRanges with Array of Arrays\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      acksPendingState.ackRanges[allMessageOutcomes[i]] = [];\n    }\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    for(let i = 0; i < allMessageOutcomes.length; i ++) {\n      assert(acksPendingState.ackRanges[allMessageOutcomes[i]].length === 0);\n    }\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n  get hasAutoAckSupport() {\n    return this._hasAutoAckSupport;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   * @default null\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  requiredSettlementOutcomes:              [], // MessageOutcome.ACCEPTED is not required to be set and always supported\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   * @default undefined\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The required settlement outcomes for the Message Consumer.\n   *\n   * A session is created with SUPPORTED_MESSAGE_ACK_CLIENT by setting\n   * the requiredSettlementOutcomes property to support negative acknowledgment outcomes.\n   *\n   * The {@link solace.MessageOutcome.ACCEPTED} outcome is not required to be set and is always\n   * supported as a settlement outcome.\n   *\n   * When the requiredSettlementOutcomes include either {@link solace.MessageOutcome.FAILED}\n   * or {@link solace.MessageOutcome.REJECTED}, a message can be settled with any of these outcomes.\n   *\n   * The {@link solace.Message#acknowledge} method internally calls the {@link solace.Message#settle}\n   * with the {@link solace.MessageOutcome.ACCEPTED} passed as the settlement outcome for that message.\n   *\n   * When received messages are Application Acknowledged/Settled with\n   * a {@link solace.MessageOutcome.ACCEPTED} outcome, they are removed from the Guaranteed\n   * Message storage on the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {Array.<solace.MessageOutcome>}\n   * @default []\n   */\n  get requiredSettlementOutcomes() {\n    return Check.something(this._requiredSettlementOutcomes)\n      && Check.array(this._requiredSettlementOutcomes)\n      ? this._requiredSettlementOutcomes\n      : DEFAULTS.requiredSettlementOutcomes;\n  }\n  set requiredSettlementOutcomes(value) {\n    this._requiredSettlementOutcomes = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageOutcome } = require('solclient-message');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n    this.partitionGroupId = undefined; // support Partition Q feature\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {any} isAutoAcked whether this is an auto-acked message\n   * @internal\n   */\n  applicationAck(messageId, isAutoAcked = false) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId, isAutoAcked);\n  }\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @param {solace.MessageOutcome} settlementOutcome The message settlement outcome\n   * @internal\n   */\n  applicationSettle(messageId, settlementOutcome) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application settlement for ${\n      messageId\n    } with outcome: solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)}`);\n    this._fsm.applicationSettle(messageId, settlementOutcome);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message._autoAcknowledge(); // No, so auto ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const { Baggage } = require('./lib/baggage');\nconst { TraceContext } = require('./lib/message-trace-context');\nconst { TraceContextSetter } = require('./lib/message-trace-context-setter');\nconst { MessageTracingSupport } = require('./lib/message-tracing-support');\n\nmodule.exports.Baggage = Baggage;\nmodule.exports.TraceContext = TraceContext;\nmodule.exports.TraceContextSetter = TraceContextSetter;\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const { Parameter: { isStringOrNothing } } = require('solclient-validate');\n\n/**\n * @classdesc\n * <b>This class abstracts baggage metadata used for distributed\n * message tracing with Solace messaging APIs types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class Baggage {\n \n    /**\n     * Get the value of the baggage associated with the message.\n     * This method is for internal use only.\n     *\n     * @returns {?String} value of baggage associated with the message\n     * @internal\n     */\n    getBaggage() {\n        return this._baggage || null;\n    }\n \n    /**\n     * Sets the value of the baggage associated with this message\n     * This method is for internal use only.\n     *\n     * @param {?String} value The valid value of baggage associated with this  message\n     * @see {@link https://www.w3.org/TR/2022/WD-baggage-20220928|w3c baggage format specification}  \n     * @internal\n     */\n    setBaggage(value) {\n        this._setBaggage(isStringOrNothing('baggage', value));\n    }\n    _setBaggage(value) {\n        this._baggage = value;\n    }\n \n}\n\nmodule.exports.Baggage = Baggage;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n    isNumber,\n    isBoolean,\n    isString,\n    isStringOrNothing,\n} = Parameter;\n\nconst { uint8ArrayToString } = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts settable metadata used for \n * distributed message tracing with Solace messaging APIs \n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\n class TraceContextSetter {\n\n    /**\n     * Abstract constructor for metadata used \n     * for distributed message tracing.\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor() {\n        this._traceId = null;\n        this._spanId = null;\n        this._isSampled = false;\n        this._traceState = null;\n        this._version = 0x01; // version=0001 (4 bits, version=1);\n    }\n\n    /**\n     * Clone this TraceContextSetter object.\n     * \n     * @returns {TraceContextSetter} the cloned TraceContextSetter instance\n     */\n    clone() {\n        const _clonedContextSetter = new TraceContextSetter();\n        _clonedContextSetter._setSpanId(this._spanId);\n        _clonedContextSetter._setTraceId(this._traceId);\n        _clonedContextSetter._setSampled(this._isSampled);\n        _clonedContextSetter._setTraceState(this._traceState);\n        _clonedContextSetter._setVersion(this._version);\n        return _clonedContextSetter;\n    }\n\n    /**\n     * The length of the traceId bytes in the binary message\n    */\n    static get TRACE_ID_BYTES_LENGTH() {\n        return 16;\n    }\n\n    /**\n     * The length of the spanId bytes in the binary message\n    */\n    static get SPAN_ID_BYTES_LENGTH() {\n        return 8;\n    }\n\n    /**\n     * The version which for now is 1. -> 0001\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);;\n    }\n    /**\n     * Sets the version\n     * \n     * @param {Number} value The version encoded as Hex value\n     */\n    setVersion(value) {\n        this._setVersion(isNumber('version', value));\n    }\n    _setVersion(value) {\n        this._version = value;\n    }\n\n    /**\n     * @private\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Sets the value of the trace identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 16-length Hex string\n     */\n    setTraceId(value) {\n        this._setTraceId(isString('traceId', value));\n    }\n    _setTraceId(value) {\n        this._traceId = value;\n    }\n \n    /**\n     * @private\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Sets the value of the span identifier associated with the message.\n     * \n     * @param {String} value The trace identifier encoded as a 8-length Hex string\n     */\n    setSpanId(value) {\n        this._setSpanId(isString('spanId', value));\n    }\n    _setSpanId(value) {\n        this._spanId = value;\n    }\n \n    /**\n     * @private\n    */\n    get isSampled() {\n        return this._isSampled || false;\n    }\n    /**\n     * Turns on or off sampling for the associated message.\n     * \n     * @param {Boolean} value if true sampling is on, off otherwise\n     */\n    setSampled(value) {\n        this._setSampled(isBoolean('isSampled', value));\n    }\n    _setSampled(value) {\n        this._isSampled = value;\n    }\n \n    /**\n     * @private\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Sets the value of the trace state associated with the message.\n     * \n     * @param {?String} value The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    setTraceState(value) {\n        this._setTraceState(isStringOrNothing('traceState', value));\n    }\n    _setTraceState(value) {\n        this._traceState = value;\n    }\n\n    /**\n     * Gets a new instance of the Message Trace Context Setter \n     * from the values in the SMF header associated with the message.\n     * \n     * @param {Buffer | Uint8Array | String | null} traceContextValue The value of trace context associated with the message\n     * @returns {solace.TraceContextSetter | null} Context setter object\n     */\n    static fromTraceContext(traceContextValue) {\n        // implementation here\n        if (traceContextValue == null) {\n            return null;\n        }\n\n        let traceContextBuffer = null;\n        if (BufferImpl.isBuffer(traceContextValue)) {\n            traceContextBuffer = traceContextValue; // do nothing since it is already a buffer\n        } else if (typeof traceContextValue === 'string') {\n            traceContextBuffer = BufferImpl.from(traceContextValue, 'latin1');\n        }\n\n        // the trace context value is at least 32 bytes (without trace state)\n        if (!traceContextBuffer || traceContextBuffer.length < 32) {\n            return null;\n        }\n\n        try {\n            const traceContextBytes = (new Uint8Array(traceContextBuffer)).buffer;\n            let bytesRead = 0; // to track the byte read offsets\n\n            const traceContextSetter = new TraceContextSetter();\n\n            const firstByte = traceContextBytes.slice(bytesRead, bytesRead + (1));\n            const byte1DataView = new DataView(firstByte, 0, 1);\n            let byte1 = byte1DataView.getUint8(bytesRead);// get the first byte\n\n            const version = byte1 >> 4; // get the version from the four MSB\n            traceContextSetter.setVersion(version); // set the version\n\n            const isSampled = ((byte1 & 0x0F) == 0x04);\n            traceContextSetter.setSampled(isSampled); // set the sampled status\n            bytesRead++;\n\n            const traceId16Bytes = traceContextBytes.slice(bytesRead, bytesRead + (16));\n            const traceId = uint8ArrayToString(traceId16Bytes, 'hex'); // set the traceId\n            traceContextSetter.setTraceId(traceId);\n            bytesRead += TraceContextSetter.TRACE_ID_BYTES_LENGTH;\n\n            const spanId8Bytes = traceContextBytes.slice(bytesRead, bytesRead + (8));\n            const spanId = uint8ArrayToString(spanId8Bytes, 'hex'); // set the spanId\n            traceContextSetter.setSpanId(spanId);\n            bytesRead += TraceContextSetter.SPAN_ID_BYTES_LENGTH;\n\n            bytesRead ++; // Skip InjectionStandard byte\n            bytesRead += 4; // Skip the 4 RFU bytes\n\n            const traceStateLengthBytes = traceContextBytes.slice(bytesRead, bytesRead + (2));\n            const traceStateLengthDataView = new DataView(traceStateLengthBytes, 0, traceStateLengthBytes.byteLength);\n            const traceStateLength = traceStateLengthDataView.getUint16(0, false);// get the trace length\n            bytesRead += 2; // move pointer past length bytes\n\n            // if there is a trace state value, read it\n            if (traceStateLength > 0) {\n                const traceStateBytes = traceContextBytes.slice(bytesRead, bytesRead + (traceStateLength));\n                const traceState = uint8ArrayToString(traceStateBytes); // set the trace state\n                traceContextSetter.setTraceState(traceState);\n            }\n            return traceContextSetter;\n        } catch (ex) {\n            return null;\n        }\n    }\n}\n\nmodule.exports.TraceContextSetter = TraceContextSetter;\n","const { Parameter } = require('solclient-validate');\nconst { Convert } = require('solclient-convert');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\nconst {\n    isBoolean,\n    isStringOrNothing,\n} = Parameter;\n\nconst {\n    stringToUint8Array,\n    hexStringToUint8Array,\n} = Convert;\n\n/**\n * @classdesc\n * <b>This class abstracts readonly view on a metadata used for \n * distributed message tracing with Solace messaging APIs\n * types. This class is for internal use only.\n * <p>\n * @hideconstructor\n * @memberof solace\n */\nclass TraceContext {\n\n    /**\n     * Abstract constructor for readonly view on metadata used \n     * for distributed message tracing.\n     * \n     * @param {TraceContextSetter} traceContextSetter {TraceContextSetter}\n     * \n     * @constructor\n     * @hideconstructor\n     * @private\n     */\n    constructor(traceContextSetter) {\n        this._traceId = isStringOrNothing('traceId', traceContextSetter.traceId);\n        this._spanId = isStringOrNothing('spanId', traceContextSetter.spanId);\n        this._isSampled = isBoolean('isSampled', traceContextSetter.isSampled);\n        this._traceState = traceContextSetter.traceState;\n        this._version = traceContextSetter.version;\n    }\n\n    /**\n     * Clone the a TraceContext object used \n     * for distributed message tracing.\n     * \n     * @param {TraceContext} toClone {TraceContext}\n     * @returns {TraceContext} the newly cloned TraceContext instance\n     */\n    static clone(toClone) {\n        const newContextSetter = new TraceContextSetter();\n        newContextSetter._setSpanId(toClone.getSpanId());\n        newContextSetter._setTraceId(toClone.getTraceId());\n        newContextSetter._setSampled(toClone.getIsSampled());\n        newContextSetter._setTraceState(toClone.getTraceState());\n        newContextSetter._setVersion(toClone.getVersion());\n        return new TraceContext(newContextSetter);\n    }\n\n    /**\n     * The version which for now is 1.\n    */\n    get version() {\n        return this._version || 0x01; // version=0001 (4 bits, version=1);\n    }\n    /**\n     * Gets the version associated with the message trace.\n     * \n     * @returns {Number} The version encoded as Hex value\n     */\n    getVersion() {\n        return this.version;\n    }\n\n    /**\n     * The maximum allowed string size of trace state to propagate.\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n    */\n    get MAX_TRACE_STATE_LENGTH() {\n        return 512;\n    }\n \n    /**\n     * The tranceId property as a 16-length string\n    */\n    get traceId() {\n        return this._traceId;\n    }\n    /**\n     * Gets the value of the trace identifier associated with the message.\n     * \n     * @returns {String} value of trace identifier associated with the message as\n     * 16-length string.\n     */\n    getTraceId() {\n        return this._traceId;\n    }\n \n    /**\n     * The spanId property a 8-length string\n    */\n    get spanId() {\n        return this._spanId;\n    }\n    /**\n     * Gets the value of the span identifier associated with the message.\n     * \n     * @returns {String} value of span identifier associated with the message as\n     * 8-length string.\n     */\n    getSpanId() {\n        return this._spanId;\n    }\n\n    /**\n     * The isSampled boolean property\n    */\n    get isSampled() {\n        return this._isSampled;\n    }\n    /**\n     * Returns true if the sampling for the associated message is on,\n     * otherwise false.\n     * \n     * @returns {Boolean} indicates whether the sampling is on or off\n     */\n    getIsSampled() {\n        return this._isSampled || false;\n    }\n\n    /**\n     * The traceState property\n    */\n    get traceState() {\n        return this._traceState;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTraceState() {\n        return this._traceState || null;\n    }\n    /**\n     * Gets the value of the trace state associated with the message.\n     * \n     * @returns {?String} The value of trace state associated with the message\n     * @see {@link https://www.w3.org/TR/trace-context/#tracestate-header-field-values|w3c trace state format specification}\n     */\n    getTruncatedTraceState() {\n        return this._standardTraceStateTruncation(this.MAX_TRACE_STATE_LENGTH);\n    }\n\n\n    /**\n     * It returns the encoded bytes that is \n     * passed to the SMF header to be encoded in \n     * SMF for the message.\n     * \n     * @returns {?Uint8Array} The value of encoded trace span context\n     */\n    getEncodedTraceContext() {\n        // format the string payload \n        // and return the correct format as a byte array or null\n        if (this.traceId == null || this.spanId == null) {\n            return null;\n        }\n\n        const traceStateLength = this.traceState == null ? 0 : this.traceState.length;\n\n        // the fixed part of the encoded data is at least 32 bytes\n        const contentBuffer = new ArrayBuffer(32 + traceStateLength);\n        let offsetPos = 0; // start from the beginning of the buffer\n        const contentBufferDataView = new DataView(contentBuffer);\n\n        let byte1 = 0; // headerByte: version 4 bits, sampled 2 bits and RFU=0 2 bits\n        // set the version to the four MSB\n        byte1 |= (this.version << 4); // version=0001 (4 bits, version=1)\n        byte1 |= this.isSampled ? 0x04 : 0x00; //sampled=0100 (2 bits, sampled=1 and 2 bits RFU=0)\n\n        // write the 1 byte header\n        contentBufferDataView.setUint8(offsetPos, byte1, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write the first 16 bytes traceId\n        const traceId16byte = hexStringToUint8Array(this.traceId); // get the 8 byte array\n        for(let i = 0; i < 16; i ++) { // write the first 16 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, traceId16byte[i], false); // write the bytes\n        }\n        offsetPos += 16; // move pointer to next free position (plus 16 bytes)\n\n        // write the first 8 bytes spanId\n        const spanId8byte = hexStringToUint8Array(this.spanId) // get the 8 byte array\n        for(let i = 0; i < 8; i ++) { // write the first 8 bytes\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint8(offsetPos + i, spanId8byte[i], false); // write the bytes\n        }\n        offsetPos += 8; // move pointer to next free position (plus 8 bytes)\n\n        // write 1 byte InjectionStandard=1 (W3C)\n        contentBufferDataView.setUint8(offsetPos, 0x01, false);\n        offsetPos ++; // move pointer to next free position\n\n        // write 4 bytes RFU=0\n        // use BigEndian; litteEndian = false\n        contentBufferDataView.setUint16(offsetPos, 0, false); // write first two RFU bytes of zeros\n        contentBufferDataView.setUint16(offsetPos + 2, 0, false); // write last two RFU bytes of zeros\n        offsetPos += 4; // move pointer to next free position\n\n\t    if (this.traceState == null) {\n            // write 2 bytes TraceState length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, 0, false); // write two bytes of zeros\n            offsetPos += 2; // move pointer to next free position\n\t    } else {\n\t      // If required, apply truncation logic on traceState\n\t      const truncatedTraceState = this.getTruncatedTraceState();\n\t      if (truncatedTraceState != null) {\n            // write 2 bytes TraceState length\n            const traceStateLength = truncatedTraceState.length;\n            // convert to two bytes\n            const traceStateLengthBytes = new Uint16Array([traceStateLength]); // get 2 bytes of length\n            // use BigEndian; litteEndian = false\n            contentBufferDataView.setUint16(offsetPos, traceStateLengthBytes, false);\n            offsetPos += 2; // move pointer to next free position\n\n            // set the remaining trace state bytes\n            const traceStateBytes = stringToUint8Array(truncatedTraceState);\n            for(let i = 0; i < traceStateBytes.length; i ++) {\n                // use BigEndian; litteEndian = false\n                contentBufferDataView.setUint8(offsetPos + i, traceStateBytes[i], false); // write the bytes\n            }\n            offsetPos += traceStateBytes.length;\n\t      }\n\t    }\n\n        // get the 8-byte array\n\t    return new Uint8Array(contentBuffer);\n    }\n\n    /**\n     * Truncate long trace states properly\n     * \n     * Refer: https://www.w3.org/TR/trace-context/#tracestate-limits\n     * @private\n     * @param {Number} maxTraceStateLength the maximum length for the trace state\n     * @returns {?String} The truncated trace state\n     */\n    _standardTraceStateTruncation(maxTraceStateLength) {\n        // cover corner cases\n\t    if (!this._traceState || this._traceState == null) {\n\t      return null;\n\t    } else if (this._traceState.length < maxTraceStateLength) {\n\t      return this._traceState; // no need to truncate\n\t    }\n\t\n        const ignoredMembers = new Array();\n\t    const traceStateBuilderArray = new Array();\n        let traceStateBuilderArrayLength = 0;\n\t    const listMembers = this._traceState.split(',');\n\n\t    for (let i = 0; i < listMembers.length; i++) {\n            let listMember = listMembers[i]; // current iteration object\n            if (listMember !== '' && listMember != null) {\n                let currentMemberLength = listMember.length;\n                if (currentMemberLength > 128) {\n                    // first of all, let's ignore members with length > 128 char\n                    ignoredMembers.push(listMember);\n                } else {\n                    let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                        traceStateBuilderArrayLength > 0 ? 1 : 0));\n\n                    if (newExpectedLength <= maxTraceStateLength) {\n                        // the comma seperator is added at the end when building the string\n                        traceStateBuilderArray.push(listMember);\n                        // increment by length of added member + 1 (for the comma)\n                        traceStateBuilderArrayLength += (currentMemberLength + (\n                            traceStateBuilderArrayLength > 0 ? 1 : 0));\n                    } else {\n                        ignoredMembers.push(listMember);\n                    }\n                }\n            }\n\t    }\n\t\n\t    // See if we can add the ignored members now\n\t    for (let i = 0; i < ignoredMembers.length; i++) {\n            let currentMember = ignoredMembers[i];\n            let currentMemberLength = currentMember.length;\n\n            let newExpectedLength = (traceStateBuilderArrayLength + currentMemberLength + (\n                traceStateBuilderArrayLength > 0 ? 1 : 0));\n            if (newExpectedLength <= maxTraceStateLength) {\n                // the comma seperator is added at the end when building the string\n                traceStateBuilderArray.push(currentMember);\n                // increment by length of added member + 1 (for the comma)\n                traceStateBuilderArrayLength += (currentMemberLength + (\n                    traceStateBuilderArrayLength > 0 ? 1 : 0));\n            }\n\t    }\n\t\n        // build the string with comma seperating the members\n\t    return traceStateBuilderArray.join(',');\n\t}\n\n    /**\n     * Returns the string representation of this object\n     * \n     * @override\n     */\n    toString() {\n        return \"{traceId=\" + this.getTraceId()\n            + \", spanId=\" + this.getSpanId()\n            + \", sampled=\" + this.isSampled\n            + \", traceState=\" + ((this.traceState == null) ? \"}\" : \"'\" + this.traceState + \"'}\");\n    }\n}\n\nmodule.exports.TraceContext = TraceContext;\n","\nconst { LogFormatter } = require('solclient-log');\nconst { Baggage } = require('./baggage');\nconst { TraceContext } = require('./message-trace-context');\nconst { TraceContextSetter } = require('./message-trace-context-setter');\n\n/**\n * @classdesc\n * <b>This class is used to enable the distributed tracing \n * support for variety of Solace message types. \n * This class is for internal use only.\n * <p>\n * @hideconstructor\n * @internal\n */\nclass MessageTracingSupport {\n\n  /**\n   * Represents OpenTelementry Support for Solace Messages.\n   * The solace.Message class will extend this class.\n   * \n   * @constructor\n   * @hideconstructor\n   * @private\n   **/\n  constructor() {\n    // empty constructor\n  }\n\n  /**\n   * Retrieves a {@link TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    if(this._traceContextSetter == null || this._traceContextSetter == undefined) {\n      // create a new context setter object\n      this._traceContextSetter = new TraceContextSetter();\n    }\n    return this._traceContextSetter;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {?solace.TraceContext} Transport context object associated with this message\n   */\n  getTransportContext() {\n    return this._transportContext;\n  }\n  /**\n   * The transport context setter\n   * \n   * @param {TraceContextSetter} contextSetter \n   */\n  _setTransportContext(contextSetter) {\n    if(contextSetter != null) {\n      this._transportContext = new TraceContext(contextSetter);\n    }\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {?solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // if there is no creation context, use the context setter to create it\n    return this._creationContext;\n  }\n  /**\n   * It is created only once by the producer/publisher and cannot be\n   * changed by intermediaries\n   * @param {TraceContextSetter} contextSetter \n   */\n  _setCreationContext(contextSetter) {\n    // set the creation context only once\n    if(contextSetter != null) {\n      this._creationContext = new TraceContext(contextSetter);\n    }\n  }\n \n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {?solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    return this._baggage;\n  }\n  /**\n   * The internal setter for the baggage prop.\n   * \n   * @param {Baggage} value \n   */\n  _setBaggage(value) {\n    this._baggage = value;\n  }\n}\n\nmodule.exports.MessageTracingSupport = MessageTracingSupport;\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageOutcome } = require('./lib/message-outcomes');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageOutcome = MessageOutcome;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicSequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (typeof cacheRequestId === 'number') {\n      return ['Cache Request Id', true, cacheRequestId, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n\n  fpTracingCreationContext(message, flags) {\n    const _creationContext = message.getCreationContext();\n\n    const isPresent = (_creationContext != null\n      && _creationContext.getTraceId() != null\n      && _creationContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_creationContext != null) ? _creationContext.toString() : null;\n    }\n    return ['Tracing CreationContext', isPresent, detailValue, null];\n  },\n\n  fpTracingTransportContext(message, flags) {\n    const _transportContext = message.getTransportContext();\n\n    const isPresent = (_transportContext != null\n      && _transportContext.getTraceId() != null\n      && _transportContext.getSpanId() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = (_transportContext != null) ? _transportContext.toString() : null;\n    }\n    return ['Trace Context SMF Parameter', isPresent, detailValue, null];\n  },\n\n  fpTracingBaggage(message, flags) {\n    const isPresent = (message.getBaggage() != null\n      && message.getBaggage().getBaggage() != null);\n\n    let detailValue = null;\n    if (flags && flags === MessageDumpFlag.MSGDUMP_FULL) {\n      const _baggage = message.getBaggage();\n      detailValue = (_baggage != null) ? _baggage.getBaggage() : null;\n    }\n    return ['Tracing Baggage', isPresent, detailValue, null];\n  },\n\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of supported message settlement outcomes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageOutcome = {\n  /**\n   * Represents a successful message processing acknowledgement outcome.\n   *\n   * (see {@link solace.Message#acknowledge}) for more details\n   */\n  ACCEPTED:         0,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n   * the message.\n   * \n   * Delivery count for the message is incremented. Redelivery will be attempted. Message may\n   * be moved to DMQ once max-redelivered is reached. Message may be delayed if the endpoint has\n   * delayed redelivery configured.\n   */\n  FAILED:           1,\n  // /**\n  //  * Represents a negative acknowledgement outcome, used to signal that the application failed to process\n  //  * the message.\n  //  * \n  //  * Delivery count for the message is NOT incremented. Redelivery will be attempted. Message may\n  //  * be moved to DMQ once max-redelivered is reached. \n  //  * A released message will always be eligible for redelivery, even if redeliveries are disabled. \n  //  * Message is immediately eligible for redelivery, even if endpoint is configured for delayed redelivery.\n  //  */\n  // RELEASED:           2,\n  /**\n   * Represents a negative acknowledgement outcome, used to signal that the application has rejected the\n   * message such as when application determines the message is invalid.\n   * \n   * Message will NOT be redelivered. Message will be moved to DMQ. If DMQ is not configured,\n   * message is deleted.\n   */\n  REJECTED:         3,\n};\n\nmodule.exports.MessageOutcome = Enum.new(MessageOutcome);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const { clone } = require('solclient-util'); // using the modified local clone version\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG, LOG_WARN } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageOutcome } = require('./message-outcomes');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\nconst { Baggage, MessageTracingSupport, TraceContext, TraceContextSetter } = require('solclient-message-tracing');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; // Makes the accessor throw, never returned to user.\n\n  // for tracing support\n  message._traceContextSetter = null;\n  message._creationContext = null;\n  message._transportContext = null;\n  message._baggage = new Baggage();\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * Function called to clear extended var-len message properties\n * @param {Message} message The message to update\n * @internal\n */\nfunction clearExtendedVarLenParameters(message) {\n  // clear the tracing support params since\n  // they use extended var-len encoding\n  message._transportContext = null;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n * @extends solace.MessageTracingSupport\n */\nclass Message extends MessageTracingSupport {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    super(); // call the tracing support constructor\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {Number|undefined} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   *\n   * @returns {Number|undefined} The delivery count reported by the broker.\n   * @throws {solace.OperationError} if endpoint does not report delivery count (message is not persistent).\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n\n  /**\n   * Settles this message in a requested way.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {solace.MessageOutcome} messageSettlementOutcome type of the settlement outcome, not expected to be {@code null}\n   * @throws {@link solace.OperationError}\n   *  * if broker does not support the specified outcome option;\n   *  * if the flow was created without specifying required {@link MessageOutcome}\n   *    Options within the consumer properties;\n   *  * if the associated {@link solace.Session} is configured\n   *    to use SUPPORTED_MESSAGE_ACK_AUTO (the default behaviour),\n   *    the use of {@link MessageOutcome#REJECTED}\n   *    and {@link MessageOutcome#FAILED} are not supported;\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connected\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   *    @see {@link solace.MessageOutcome}for detailed explanation of available options\n   */\n  settle(messageSettlementOutcome) {\n    // implementation here\n    // validation checks here\n    if (this._acked) {\n      throw new OperationError('Message can only be settled once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot settle a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot settle a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot settle using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot settle using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application settled`);\n      return;\n    }\n\n    // validate the settlement outcome and send correct Enum value\n    const settlementOutcome = messageSettlementOutcome;\n    if (MessageOutcome.values.indexOf(settlementOutcome) === -1) {\n      throw new OperationError(`Settlement outcome for message must be valid`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // check that the broker consumer session has support for the outcome and \n    const doesConsumerSupportOutcome = this._consumer.getProperties().requiredSettlementOutcomes.some(v => v === settlementOutcome);\n    // that the session was created with support for the outcome\n    if (settlementOutcome != MessageOutcome.ACCEPTED && !doesConsumerSupportOutcome) {\n      throw new OperationError(`solace.MessageOutcome.${MessageOutcome.nameOf(settlementOutcome)} not supported for this Message Consumer`,\n        ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // actual settlement logic\n    this._consumer.applicationSettle(this._guaranteedMsgId, settlementOutcome);\n    this._acked = true; // also set as ACKed/settled\n  }\n\n  /**\n   * Returns whether settle(solace.MessageOutcome) has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isSettled() {\n    return this._acked || false;\n  }\n\n  /**\n   * Internal validation checks before we attempt to acknowledge this message.\n   * @private\n   */\n  _validateBeforeAcknowledge() {\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n  }\n\n  /**\n   * Acknowledges this message.\n   * This is the same as calling {@link solace.Message#settle(solace.MessageOutcome.ACCEPTED)}.\n   * Internally uses Message.settle() with the ACCEPTED MessageOutcome.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // check to ensure that you cannot manually settle a message with acknowledgeMode = AUTO\n    if (this._consumer._fsm.hasAutoAckSupport) {\n      LOG_WARN(`Consumer configured to auto-acknowledge messages, so message ${\n        this._guaranteedMsgId} cannot be application acknowledge`);\n      return;\n    }\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, false);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Used by the message-dispatcher to auto-acknowledge this message.\n   * @internal\n   */\n  _autoAcknowledge() {\n    // call all the validations before we acknowledge message\n    this._validateBeforeAcknowledge();\n\n    // use settlement implementation with ACCEPTED outcome\n    this._consumer.applicationAck(this._guaranteedMsgId, true);\n    this._acked = true; // also set message as acked/settled\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  // Message Tracing Section\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContextSetter} object that is used to modify \n   * an appropriate TraceContext associated with a message transparently.\n   * When no context is stored in a message it will create and store a creation \n   * context with a message that can be used as an initial\n   * transport context at the same time. \n   * It will never override an existing message creation context. \n   * When creation context is present or only transport context is present, it will\n   * override an existing transport context information with a newly provided one.\n   * \n   * @returns {solace.TraceContextSetter} Transport context setter object associated with this message; never expected to be null\n   */\n  getTraceContextSetter() {\n    // return the parent method\n    return super.getTraceContextSetter();\n  }\n\n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over of the distributed tracing\n   * message creation context information usable by intermediary instrumentation across\n   * service boundaries. It allows correlating the producer with the consumers of a message,\n   * regardless of intermediary instrumentation. It must not be altered by intermediaries.\n   *\n   * @returns {solace.TraceContext} Message creation context object associated with this message;\n   */\n  getCreationContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getCreationContext();\n  }\n \n  /**\n   * Retrieves a {@link solace.TraceContext} object used for carrying over \n   * of the distributed tracing transport context information usable or modifiable \n   * by intermediary instrumentation across service boundaries. \n   * It allows correlating the producer and the consumer with an intermediary.\n   * It also allows correlating multiple intermediaries among each other.\n   *\n   * @returns {solace.TraceContext} Transport context object associated with this message;\n   */\n  getTransportContext() {\n    // call the parent method. Returns a readonly copy\n    return super.getTransportContext();\n  }\n\n  /**\n   * Set the transport context.\n   * Called when the message is received from broker\n   * \n   * @param {solace.TraceContextSetter} contextSetter \n   */\n  setTransportContext(contextSetter) {\n    // call the parent method.\n    super._setTransportContext(contextSetter);\n  }\n\n  /**\n   * Retrieves a {@link solace.Baggage} carrier object used for carrying over of the distributed tracing\n   * message baggage information across service boundaries.  It must not be altered by\n   * intermediaries.\n   *\n   * @return {solace.Baggage} baggage carrier object associated with this message,\n   */\n  getBaggage() {\n    // returns the parent method baggage instance\n    // used for setting and retriving the baggage value \n    return super.getBaggage();\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n\n  /**\n   * Clears all extended var-len message properties on this message.\n   * The message no longer has any extended variable length\n   * properties set.\n   */\n  clearExtendedVarLenParams() {\n    clearExtendedVarLenParameters(this);\n  }\n}\n\n/**\n * A standard property key that clients should use if they want to\n * group messages into different queue partitions.\n * Expected value is UTF-8 encoded up to 255 bytes long string.\n */\nMessage.SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY = 'JMSXGroupID';\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} [queueSpec.name=null] The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName() || ''}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n * @private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   * @deprecated since broker v9.10.0.12\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n  /**\n   * Support for ApplicationAck optional outcomes \"failed\" and \"rejected\".\n   */\n  AD_APP_ACK_FAILED:            30,\n  /**\n   * Broker supports variable-length SMF extended parameters.\n   */\n  VAR_LEN_EXT_PARAM:            31,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n  /**\n   * Indicates whether a client supports Partitioned Queues\n   * and whether a PartitionGroupId will be proccessed in a BindResponse message.\n   * Always true\n   * \n   * @since 10.12.0\n   */\n   PQ: 2,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    // call this to initialize the _mutableState property\n    this.reset(); \n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      // finished DNS resolution checks\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object|String|null|undefined} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     * @default null\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageOutcome,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this); // this._transport == null at this point \n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n\n    const { LOG_WARN } = this.logger;\n\n    // check for whether the broker session supports the capabilities\n    const settlementOutcomes = consumerProperties.requiredSettlementOutcomes;\n    if (settlementOutcomes && settlementOutcomes.length > 0) {\n      // check the capability bit for settlement outcome (NACK) support or throw OperationError()\n      const isNackRequired = settlementOutcomes.some(v => v === MessageOutcome.FAILED || MessageOutcome.REJECTED);\n      if(isNackRequired && !this._session.isCapable(CapabilityType.AD_APP_ACK_FAILED)) {\n        const outcomeNotSupportedError = `Session.capabilitySettlementOutcomeNotSupported: [ ${\n          settlementOutcomes.map(v => `solace.MessageOutcome.${MessageOutcome.nameOf(v)}`).join(', ')\n        } ]`;\n        // log the operation error as a Warning\n        LOG_WARN(outcomeNotSupportedError);\n        // then throw the error here\n        throw new OperationError(outcomeNotSupportedError, ErrorSubcode.INVALID_OPERATION, null);\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      let result = false;\n      if(this._correlatedReqs) {\n        result = delete this._correlatedReqs[correlationTag];\n      }\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisited.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @default null\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @default null\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   * @default undefined\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|null|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object|String|null|undefined} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n\n    // check to see if we can send variable length params to the broker\n    if (!this.isCapable(CapabilityType.VAR_LEN_EXT_PARAM)) {\n      LOG_TRACE('Broker session does not support VAR LEN SMF extended parameters');\n      // clear these message properties since var-len extended\n      // properties not supported on broker\n      message.clearExtendedVarLenParams();\n\n      // throw error if these extended var-length message properties are set\n      if(this._failOnExtendedVariableLengthProperties(message)) {\n        throw new OperationError(\n          'Broker does not support variable length SMF extended parameters',\n          ErrorSubcode.INVALID_OPERATION);\n      }\n    }\n    this.validateAndSendMessage(message);\n  }\n\n  _failOnExtendedVariableLengthProperties(message) {\n    return false; // return false since no properties for now\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max, outcome = undefined) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  const paramLength = (outcome == undefined || outcome === 0) ? 18 : 19;\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(paramLength)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  if(outcome != undefined && outcome > 0) { // skip for MessageOutcome.ACCEPTED\n    data.push(Convert.int8ToStr(outcome)); // write the settlement outcome\n  }\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n      case SMFLib.SMFAdProtocolParam.PARTITION_GROUP_ID:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue(); // this is the Map() of all settlement ACK/NACK ranges\n          const uh = param.getUh();\n          const type = param.getType();\n          // iterate through the Map of ranges per settlement outcome\n          ranges.forEach((settlementRanges, outcome) => {\n            for (let i = 0; i < settlementRanges.length; ++i) {\n              const range = settlementRanges[i];\n              paramspace.push(encAdp64AckPairParam(uh,\n                                                   type,\n                                                   range[0],\n                                                   range[1],\n                                                   outcome));\n            }\n          });\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst { Baggage, TraceContextSetter } = require('solclient-message-tracing');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long, Convert: { stringToUint8Array } } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n\n      const bag = headerMap.getField('bag'); // get the baggage field\n      const ctx = headerMap.getField('ctx'); // the message creation context field\n\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n      if (bag) {\n        // set the baggage\n        const _baggageObj = new Baggage();\n        _baggageObj.setBaggage(bag.getValue());\n        message._setBaggage(_baggageObj);\n      }\n      if (ctx) {\n        // create a context setter from the bytes or string depending on the active profile\n        const _traceContextSetter = TraceContextSetter.fromTraceContext(ctx.getValue());\n         // use it to set the message creation context, can be null\n        message._setCreationContext(_traceContextSetter);\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // set the trace span transport context for the message if present\n  if (smfHeader.pm_ts_transport_context) {\n    // create a context setter from the bytes\n    const _traceContextSetter = TraceContextSetter.fromTraceContext(smfHeader.pm_ts_transport_context);\n    // use it to create the transport context\n    message._setTransportContext(_traceContextSetter);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n  uint8ArrayToString,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n  FORCED_LENGTH_MODE,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // the baggage value in the correct format. See - https://www.w3.org/TR/baggage/\n  const _baggage = message.getBaggage();\n  addToMapIfPresent(headerMap, 'bag', SDTFieldType.STRING, (_baggage ? _baggage.getBaggage() : null));\n  // message creation context will never be null\n  // set the encoded bytes into the map\n  const _creationContext = message.getCreationContext();\n  addToMapIfPresent(\n    headerMap, 'ctx', SDTFieldType.BYTEARRAY,\n    (_creationContext ? _creationContext.getEncodedTraceContext() : null)\n  );\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  // get the transport context, if available\n  const _transportContext = message.getTransportContext();\n  if(_transportContext != null) {\n    // set the encoded Uint8 array into the header property\n    smfHeader.pm_ts_transport_context = _transportContext.getEncodedTraceContext();\n  }\n  \n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      message.getCreationContext() ||\n      (message.getBaggage() && message.getBaggage().getBaggage()) ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_ts_transport_context) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.TS_TRANSPORT_CONTEXT,\n                                                     uint8ArrayToString(header.pm_ts_transport_context),\n                                                     FORCED_LENGTH_MODE.SIX);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.FORCED_LENGTH_MODE = {\n  FIVE:  5,\n  SIX:   6\n};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value, forcedLengthMode = -1) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n\n  // prevent unsupported value from breaking default behaviour\n  if(forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) {\n    forcedLengthMode = -1;\n  }\n\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (\n    ((length < 253) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.SIX) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.FIVE)\n  ) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (\n    ((length < 256 * 256 - 4) && forcedLengthMode !== ParamParse.FORCED_LENGTH_MODE.FIVE) \n    || (forcedLengthMode === ParamParse.FORCED_LENGTH_MODE.SIX)\n  ) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      case SMFExtendedParameterType.TS_TRANSPORT_CONTEXT:\n        // from specs, trace span context must be at least 36 bytes\n        // use 36 - 4 (account for error in 2-byte variable length value calculation above) = 32\n        if(valueLen >= 32) {\n          // will convert this string to a UInt8Array later\n          smfHeader.pm_ts_transport_context = dataBuf.toString('latin1', pos, pos + valueLen);\n        } else {\n          LOG_TRACE('Skipped due to unexpected size of extended parameter ' +\n                    `type ${type} value length ${valueLen} offset ${pos}`);\n        }\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { MessageOutcome } = require('solclient-message');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The partitionGroupId, if present\n   */\n  getPartitionGroupId() {\n    return this._readParameter(SMFAdProtocolParam.PARTITION_GROUP_ID,\n                               strToInt16, bUInt16BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   *  @param {Long} [partitionGroupId=undefined] Partition Group ID for support of\n   *          Partition Queue feature, associate new flow with the same\n   *          PartitionGroupId as an old flow (e.g due to a reconnect).\n   * @param {Boolean} [hasNackSupport=false] If true, flow is created with Consumer Redelivery\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined,\n                                partitionGroupId = undefined,\n                                hasNackSupport = false) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    /**\n     * A Flow that has Browser support cannot have NACK support \n     */\n    if (hasNackSupport /* is true */) {\n      // [AssuredCtrl FlowType Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x3 // create flow with Consumer Redelivery support\n      ));\n    } else if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2 // create flow with browser support\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    // support for PartitionGroupId. Only send when not null and undefined\n    if (partitionGroupId !== undefined && partitionGroupId !== null) {\n      // [AssuredCtrl PartitionGroupId Parameter]    ***\n      LOG_TRACE(`Adding partitionGroupId to message: ${partitionGroupId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.PARTITION_GROUP_ID,\n        partitionGroupId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Map.<Array.<Array.<Long>>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `Map.set( MessageOutcome.ACCEPTED, [ [singleMessageId, singleMessageId] ] )`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && (applicationAckRanges.size > 0)) {\n      // aggregate the total length of the ack/nack ranges\n      let totalRangeLen  = 0;\n      const allOutcomes = MessageOutcome.values;\n      for(let i = 0; i < allOutcomes.length; i ++) {\n        totalRangeLen += applicationAckRanges.has(allOutcomes[i]) ? applicationAckRanges.get(allOutcomes[i]).length : 0;\n      }\n\n      if (totalRangeLen > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n  CapabilityType.AD_APP_ACK_FAILED,\n  CapabilityType.VAR_LEN_EXT_PARAM,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n  [ClientCapabilityType.PQ, 0x20],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID, ClientCapabilityType.PQ]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n    this.pm_ts_transport_context = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n  PARTITION_GROUP_ID:                      0x38,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n  PARTITION_KEY_HASH:       0x35, // @Todo: not yet implemented as improvement for PQ\n  TS_TRANSPORT_CONTEXT:     0x36,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n  /**\n   * Count of received persistent and non-persistent messages that were rejected.\n   */\n  RX_SETTLE_REJECTED:       44,\n  /**\n   * Count of received persistent and non-persistent messages that were failed.\n   */\n  RX_SETTLE_FAILED:         45,\n  /**\n   * Count of received persistent and non-persistent messages that were accepted manually (no auto-acks).\n   */\n  RX_SETTLE_ACCEPTED:       46,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    // added check to prevent it returning as undefined/null\n    return this._correlationCounter ? this._correlationCounter : 0;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code, to be overridden in subclass\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Force fail the underlying transport's socket to force a failure.\n   * Returns transport return code.\n   * @override\n   * @param {?String} msg The message associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  forceFailure(msg) {\n    const errorMsg = (msg !== undefined && msg !== null) ? msg : ''; // default empty\n    LOG_DEBUG(`Destroy Tls transport: ${errorMsg}`);\n    if (this._transportSession) {\n      this._transportSession._socket._sender._socket.destroy(new Error(errorMsg));\n    }\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\nconst clone = require('./lib/clone');\n\nmodule.exports = {\n  clone,\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('./clone'); // using the modified local clone version\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","/**\n * Copyright (c) 2011-2016 Paul Vorbach and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining \n * a copy of this software and associated documentation files \n * (the “Software”), to deal in the Software without restriction, \n * including without limitation the rights to use, copy, modify, \n * merge, publish, distribute, sublicense, and/or sell copies of \n * the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included \n * in all copies or substantial portions of the Software.\n * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\n/**\n * The is a local modified version of the clone npm module (https://www.npmjs.com/package/clone).\n * According to its description, it offers a foolproof deep cloning \n * of objects, arrays, numbers, strings, maps, sets, \n * promises, etc. in JavaScript.\n * \n * I refactored it to be compatible with Webpack.\n * Refator List:\n * - update the use of the 'var' keyword to 'let' and 'const' where appropriate.\n * - Made the variable names more clearer and intuitive (clean code)\n * - I used ES6 contants/definitions where possible.\n * \n * Original can be found Here:\n * - On Npm -> https://www.npmjs.com/package/clone\n * - On GitHub -> https://github.com/pvorb/node-clone\n * \n * Created by oodigie on 26/05/2023.\n */\nconst clone = (function() {\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nlet nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nlet nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nlet nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  const allParents = [];\n  const allChildren = [];\n\n  const useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    let child;\n    let proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      const index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      let keyChild, valueChild;\n      parent.forEach(function(value, key) {\n        keyChild = _clone(key, depth - 1);\n        valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      let entryChild;\n      parent.forEach(function(value) {\n        entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (let i in parent) {\n      let attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      const symbols = Object.getOwnPropertySymbols(parent);\n      for (let i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        let symbol = symbols[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      const allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (let i = 0; i < allPropertyNames.length; i++) {\n        let propertyName = allPropertyNames[i];\n        let descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  let emptyCloneFunc = function () {};\n  emptyCloneFunc.prototype = parent;\n  return new emptyCloneFunc();\n};\n\n// private utility functions\n\nfunction __objToStr(obj) {\n  return Object.prototype.toString.call(obj);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(obj) {\n  return typeof obj === 'object' && __objToStr(obj) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(regExpOptions) {\n  let flags = '';\n  if (regExpOptions.global) flags += 'g';\n  if (regExpOptions.ignoreCase) flags += 'i';\n  if (regExpOptions.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n\n})();\n\nmodule.exports = clone;\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6010);\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBlob","Blob","BufferEncoder","Buffer","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","uint8ArrayToString","format","undefined","uint8DataArray","result","toLowerCase","padStart","hexStringToUint8Array","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","MessageTracing","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageOutcome","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","Baggage","TraceContext","TraceContextSetter","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","index","NOEXPORT_PREFIX","isNoExport","shareGroup","groupIndex","SHARE_PREFIX","isShare","LEVEL_DELIMETER_LEN","indexOf","substring","LEVEL_DELIMETER","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","INVALID_QUEUE_OR_TOPIC_ENDPOINT_DURABILITY","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_WITHOUT_SUBSCRIPTIONS_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","PARTITIONED_QUEUE_BROWSING_NOT_SUPPORTED","PARTITIONED_QUEUE_SELECTORS_NOT_SUPPORTED","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","SYNC_REPLICATION_INELIGIBLE","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","ofStrings","strings","ofNumbers","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","newInterval","interval","onInterval","timerRef","setInterval","clearInterval","newTimeout","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","g","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","settlementOutcome","exists","ACCEPTED","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_hasAutoAckSupport","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","verifyNackSettlementOutcomesSupport","requiredSettlementOutcomes","settlementOutcomes","FAILED","REJECTED","isCapable","AD_APP_ACK_FAILED","outcomeNotSupportedError","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","checkCapabilitiesChoicePointOnRebind","externalTransition","Reconnecting","RBindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","partitionGroupId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","partitionGroupIdValue","getPartitionGroupId","_clearPartitionGroupId","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","UnbindSent","FlowUp","reconnectAttempts","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","dupAckRanges","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","isAutoAcked","applicationSettle","messageOutcome","RX_SETTLE_FAILED","RX_SETTLE_REJECTED","RX_SETTLE_ACCEPTED","RX_ACKED","oldAckRanges","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","allMessageOutcomes","currentRangeLength","totalRangeLen","MAX_CLIENT_ACK_RANGES","bareRanges","hasAnyBareRanges","range","forceTransportAck","failedBareRanges","rejectedBareRanges","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","hasAutoAckSupport","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_requiredSettlementOutcomes","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","_autoAcknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","MessageTracingSupport","isStringOrNothing","getBaggage","_baggage","setBaggage","_setBaggage","isNumber","isBoolean","_traceId","_spanId","_isSampled","_traceState","_version","_clonedContextSetter","_setSpanId","_setTraceId","_setSampled","_setTraceState","_setVersion","TRACE_ID_BYTES_LENGTH","SPAN_ID_BYTES_LENGTH","version","setVersion","traceId","setTraceId","spanId","setSpanId","isSampled","setSampled","traceState","setTraceState","fromTraceContext","traceContextValue","traceContextBuffer","traceContextBytes","bytesRead","traceContextSetter","firstByte","byte1","DataView","getUint8","traceId16Bytes","spanId8Bytes","traceStateLengthBytes","traceStateLength","getUint16","traceStateBytes","toClone","newContextSetter","getSpanId","getTraceId","getIsSampled","getTraceState","getVersion","MAX_TRACE_STATE_LENGTH","getTruncatedTraceState","_standardTraceStateTruncation","getEncodedTraceContext","contentBuffer","offsetPos","contentBufferDataView","setUint8","traceId16byte","spanId8byte","setUint16","truncatedTraceState","Uint16Array","maxTraceStateLength","ignoredMembers","traceStateBuilderArray","traceStateBuilderArrayLength","listMembers","listMember","currentMemberLength","currentMember","getTraceContextSetter","_traceContextSetter","getTransportContext","_transportContext","_setTransportContext","contextSetter","getCreationContext","_creationContext","_setCreationContext","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","fpTracingCreationContext","isPresent","fpTracingTransportContext","fpTracingBaggage","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isInstanceOfOrNothing","isNumberOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","settle","messageSettlementOutcome","doesConsumerSupportOutcome","isSettled","_validateBeforeAcknowledge","acknowledge","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","setTransportContext","validFlags","f","clearExtendedVarLenParams","SOLCLIENT_USER_PROP_QUEUE_PARTITION_KEY","ReplayStartType","RMID_VERSION_1_PREFIX","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","NONEXCLUSIVE","valTopicString","createFromSpec","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","VAR_LEN_EXT_PARAM","UNBIND_ACK","BR_ERRORID","PQ","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","url","host","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","useSsl","all","regex","arrayLength","currententry","string","matchUrl","SessionPropertiesValidator","transportProtocol","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","validatePropsSupportedByTransport","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","SessionPropertiesBase","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryInterval","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","WS_BINARY","xhrBinary","streaming","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","_failOnExtendedVariableLengthProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","noSenderTimestamp","senderTimestamp","now","noSequenceNumber","sequenceNumber","noSenderId","senderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","outcome","paramLength","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","PARTITION_GROUP_ID","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","settlementRanges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","bag","ctx","_baggageObj","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","pm_ts_transport_context","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","FORCED_LENGTH_MODE","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","pm_queue_len","LIGHT_QUEUE_NAME_OFFSET","pm_queue_offset","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","pm_ad_ackimm","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","TS_TRANSPORT_CONTEXT","SIX","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","userData","adaptMessageToSmf_nonPayload","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","FIVE","delmode","lookup","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","forcedLengthMode","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","pm_ad_publisher_id","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","hasNackSupport","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","allOutcomes","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","prmGetDtoPriorityValue","dto","local","network","prmParseDtoPriorityValue","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","PARTITION_KEY_HASH","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","navigator","appVersion","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","forceFailure","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","precallback","tlsShutdown","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","browserSupportsStreamingResponse","xhr","check","onprogress","WebTransportSessionBase","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","errorMsg","_socket","_sender","WebSocketCloseCodes","MyWebSocket","WebSocket","adaptURL","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","close","cancelQuery","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","_instanceof","nativeMap","nativeSet","nativePromise","Promise","depth","allParents","allChildren","useBuffer","_clone","proto","reject","then","__isArray","__isRegExp","RegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","regExpOptions","global","ignoreCase","multiline","clonePrototype","emptyCloneFunc","WINDOWS_VERSION_MAP","BROWSER_PROCESS","safeEncode","browserAgentInfo","agentStr","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionTest","versionPart","versionMatch","getBrowserAgentInfo","arg","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","memberOf","objectValues","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","num","opts","seen","stylize","stylizeNoColor","colors","showHidden","isObject","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","isNull","hasOwn","prop","isRegExp","re","objectToString","isError","isDate","o","formatError","recurseTimes","primitive","simple","JSON","stringify","formatPrimitive","visibleKeys","arrayToHash","braces","toUTCString","l","formatProperty","formatArray","prev","cur","reduceToSingleString","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","encodingOrOffset","TypeError","isEncoding","actual","write","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","poolSize","alloc","allocUnsafeSlow","_isBuffer","y","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","INVALID_BASE64_RE","leadSurrogate","base64clean","src","dst","alphabet","table","i16","BufferBigIntNotDefined","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","ownKeys","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","handler","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","warning","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","addEventListener","wrapListener","removeEventListener","setMaxListeners","getMaxListeners","doError","er","listeners","originalListener","spliceOne","off","rawListeners","eventNames","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis"],"sourceRoot":""}